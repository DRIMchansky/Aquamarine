(function(a){function b(d){if(c[d])return c[d].exports;var e=c[d]={i:d,l:!1,exports:{}};return a[d].call(e.exports,e,e.exports,b),e.l=!0,e.exports}var c={};return b.m=a,b.c=c,b.d=function(a,c,d){b.o(a,c)||Object.defineProperty(a,c,{enumerable:!0,get:d})},b.r=function(a){'undefined'!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(a,Symbol.toStringTag,{value:'Module'}),Object.defineProperty(a,'__esModule',{value:!0})},b.t=function(a,c){if(1&c&&(a=b(a)),8&c)return a;if(4&c&&'object'==typeof a&&a&&a.__esModule)return a;var d=Object.create(null);if(b.r(d),Object.defineProperty(d,'default',{enumerable:!0,value:a}),2&c&&'string'!=typeof a)for(var e in a)b.d(d,e,function(b){return a[b]}.bind(null,e));return d},b.n=function(a){var c=a&&a.__esModule?function(){return a['default']}:function(){return a};return b.d(c,'a',c),c},b.o=function(a,b){return Object.prototype.hasOwnProperty.call(a,b)},b.p='',b(b.s='./js/scripts.js')})({"./js/components/hamburger.js":/*!************************************!*\
  !*** ./js/components/hamburger.js ***!
  \************************************//*! no static exports found */function(module,exports){eval(';\n\n(function () {\n  var hamburger = document.querySelector(\'.hamburger\');\n  var nav = document.querySelector(\'.nav\');\n  var body = document.getElementsByTagName(\'body\')[0];\n  hamburger.addEventListener(\'click\', function () {\n    hamburger.classList.toggle(\'is-active\');\n    nav.classList.toggle(\'nav_visible\');\n    body.classList.toggle(\'is-open\');\n  });\n})();\n\n//# sourceURL=webpack:///./js/components/hamburger.js?')},"./js/components/map.js":/*!******************************!*\
  !*** ./js/components/map.js ***!
  \******************************//*! no static exports found */function(module,exports){eval('\n\n//# sourceURL=webpack:///./js/components/map.js?')},"./js/components/sticky.js":/*!*********************************!*\
  !*** ./js/components/sticky.js ***!
  \*********************************//*! no static exports found */function(module,exports){eval('{\n  var header = document.querySelector(\'.header\');\n  var sticky = header.offsetTop;\n\n  window.onscroll = function () {\n    if (window.pageYOffset > sticky) {\n      header.classList.add(\'header_sticky\');\n    } else {\n      header.classList.remove(\'header_sticky\');\n    }\n  };\n}\n\n//# sourceURL=webpack:///./js/components/sticky.js?')},"./js/scripts.js":/*!***********************!*\
  !*** ./js/scripts.js ***!
  \***********************//*! no exports provided */function(module,__webpack_exports__,__webpack_require__){'use strict';eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _components_hamburger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/hamburger */ "./js/components/hamburger.js");\n/* harmony import */ var _components_hamburger__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_hamburger__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/map */ "./js/components/map.js");\n/* harmony import */ var _components_map__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_components_map__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_sticky__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/sticky */ "./js/components/sticky.js");\n/* harmony import */ var _components_sticky__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_components_sticky__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_lite_youtube_embed_src_lite_yt_embed__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../node_modules/lite-youtube-embed/src/lite-yt-embed */ "./node_modules/lite-youtube-embed/src/lite-yt-embed.js");\n/* harmony import */ var _node_modules_lite_youtube_embed_src_lite_yt_embed__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_lite_youtube_embed_src_lite_yt_embed__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\n//# sourceURL=webpack:///./js/scripts.js?')},"./node_modules/lite-youtube-embed/src/lite-yt-embed.js":/*!**************************************************************!*\
  !*** ./node_modules/lite-youtube-embed/src/lite-yt-embed.js ***!
  \**************************************************************//*! no static exports found */function(module,exports){eval('/**\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\n *\n * Thx to these as the inspiration\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\n *   https://autoplay-youtube-player.glitch.me/\n *\n * Once built it, I also found these:\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (\uD83D\uDC4D\uD83D\uDC4D)\n *   https://github.com/Daugilas/lazyYT\n *   https://github.com/vb/lazyframe\n */\nclass LiteYTEmbed extends HTMLElement {\n    constructor() {\n        super();\n\n        // Gotta encode the untrusted value\n        // https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#rule-2---attribute-escape-before-inserting-untrusted-data-into-html-common-attributes\n        this.videoId = encodeURIComponent(this.getAttribute(\'videoid\'));\n        this.rel = encodeURIComponent(this.getAttribute(\'rel\'));\n\n        /**\n         * Lo, the youtube placeholder image!  (aka the thumbnail, poster image, etc)\n         * There is much internet debate on the reliability of thumbnail URLs. Weak consensus is that you\n         * cannot rely on anything and have to use the YouTube Data API.\n         *\n         * amp-youtube also eschews using the API, so they just try sddefault with a hqdefault fallback:\n         *   https://github.com/ampproject/amphtml/blob/6039a6317325a8589586e72e4f98c047dbcbf7ba/extensions/amp-youtube/0.1/amp-youtube.js#L498-L537\n         * For now I\'m gonna go with this confident (lol) assertion: https://stackoverflow.com/a/20542029, though I\'ll use `i.ytimg` to optimize for origin reuse.\n         *\n         * Worth noting that sddefault is _higher_ resolution than hqdefault. Naming is hard. ;)\n         * From my own testing, it appears that hqdefault is ALWAYS there sddefault is missing for ~10% of videos\n         *\n         * TODO: Do the sddefault->hqdefault fallback\n         *       - When doing this, apply referrerpolicy (https://github.com/ampproject/amphtml/pull/3940)\n         * TODO: Consider using webp if supported, falling back to jpg\n         */\n        this.posterUrl = `https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg`;\n        // Warm the connection for the poster image\n        LiteYTEmbed.addPrefetch(\'preload\', this.posterUrl, \'image\');\n        // TODO: support dynamically setting the attribute via attributeChangedCallback\n    }\n\n    connectedCallback() {\n        this.style.backgroundImage = `url("${this.posterUrl}")`;\n\n        const playBtn = document.createElement(\'div\');\n        playBtn.classList.add(\'lty-playbtn\');\n        this.append(playBtn);\n\n        // On hover (or tap), warm up the TCP connections we\'re (likely) about to use.\n        this.addEventListener(\'pointerover\', LiteYTEmbed.warmConnections, {once: true});\n\n        // Once the user clicks, add the real iframe and drop our play button\n        // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\n        //   We\'d want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\n        this.addEventListener(\'click\', e => this.addIframe());\n    }\n\n    // // TODO: Support the the user changing the [videoid] attribute\n    // attributeChangedCallback() {\n    // }\n\n    /**\n     * Add a <link rel={preload | preconnect} ...> to the head\n     */\n    static addPrefetch(kind, url, as) {\n        const linkElem = document.createElement(\'link\');\n        linkElem.rel = kind;\n        linkElem.href = url;\n        if (as) {\n            linkElem.as = as;\n        }\n        linkElem.crossorigin = true;\n        document.head.append(linkElem);\n    }\n\n    /**\n     * Begin pre-connecting to warm up the iframe load\n     * Since the embed\'s network requests load within its iframe,\n     *   preload/prefetch\'ing them outside the iframe will only cause double-downloads.\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\n     *\n     * Maybe `<link rel=preload as=document>` would work, but it\'s unsupported: http://crbug.com/593267\n     * But TBH, I don\'t think it\'ll happen soon with Site Isolation and split caches adding serious complexity.\n     */\n    static warmConnections() {\n        if (LiteYTEmbed.preconnected) return;\n\n        // The iframe document and most of its subresources come right off youtube.com\n        LiteYTEmbed.addPrefetch(\'preconnect\', \'https://www.youtube.com\');\n        // The botguard script is fetched off from google.com\n        LiteYTEmbed.addPrefetch(\'preconnect\', \'https://www.google.com\');\n\n        // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\n        LiteYTEmbed.addPrefetch(\'preconnect\', \'https://googleads.g.doubleclick.net\');\n        LiteYTEmbed.addPrefetch(\'preconnect\', \'https://static.doubleclick.net\');\n\n        LiteYTEmbed.preconnected = true;\n    }\n\n    addIframe(){\n        let videoUrlWithQuery = `${this.videoId}?autoplay=1`;\n        if (this.rel && this.rel !== \'null\') {\n            videoUrlWithQuery+=`&rel=${this.rel}`;\n        }\n\n        const iframeHTML = `\n<iframe width="560" height="315" frameborder="0"\n  allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen\n  src="https://www.youtube.com/embed/${videoUrlWithQuery}"\n></iframe>`;\n        this.insertAdjacentHTML(\'beforeend\', iframeHTML);\n        this.classList.add(\'lyt-activated\');\n    }\n}\n// Register custome element\ncustomElements.define(\'lite-youtube\', LiteYTEmbed);\n\n\n//# sourceURL=webpack:///./node_modules/lite-youtube-embed/src/lite-yt-embed.js?')}});